server.port=8080

#打开所有的web访问端点
management.endpoints.web.exposure.include=*

spring.application.name=springcloud-service-portal


#每间隔2s，向服务端发送一次心跳，证明自己依然"存活"
eureka.instance.lease-renewal-interval-in-seconds=2
#告诉服务端，如果我10s之内没有给你发心跳，就代表我故障了，将我踢出掉
eureka.instance.lease-expiration-duration-in-seconds=10
#告诉服务端，服务实例以IP作为链接，而不是取机器名
eureka.instance.prefer-ip-address=true
#告诉服务端，服务实例的名字
eureka.instance.instance-id=springcloud-service-portal-8080

#eureka注册中心的连接地址
eureka.client.service-url.defaultZone=http://192.168.0.105:8761/eureka,http://192.168.0.105:8762/eureka,http://192.168.0.105:8763/eureka

feign.hystrix.enabled=true
#management.endpoints.web.exposure.include=hystrix.stream

info.address="天津武清"
ribbon.ReadTimeout=6000
ribbon.ConnectTimeout=3000

hystrix.command.default.execution.timeout.enabled=true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
#如果hystrix.command.default.execution.timeout.enabled为true,
# 则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效；
#如果hystrix.command.default.execution.timeout.enabled为false,
# 则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon的ConnectTimeout,
# 配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效；
server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8

spring.http.encoding.enabled=true

spring.http.encoding.force=true